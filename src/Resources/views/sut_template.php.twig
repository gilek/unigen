<?php

{% if sut.hasNamespace %}
namespace {{ testNamespace }};{{ '\n' }}
{% endif %}
{% for dependency in sut.getDependencies %}
{% if dependency.isObject %}
use {{ dependency.getType }};
{% endif %}
{% endfor %}
{% if config.get('mockFramework') == 'phpunit' and sut.hasDependencies %}
use PHPUnit\Framework\MockObject\MockObject
{% elseif config.get('mockFramework') == 'mockery' and sut.hasDependencies %}
use Mockery;
use Mockery\MockInterface as MockObject;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
{% endif %}
use {{ sut.getName }};

final class {{ sut.getShortName }}Test extends {{ config.get('testCaseClass') }}
{
{% if config.get('mockFramework') == 'mockery' and sut.hasDependencies %}
    {{ 'use MockeryPHPUnitIntegration;\n' }}
{% endif %}
{% for dependency in sut.getDependencies %}
    /** @var {{ dependency.getShortName }}{% if dependency.isObject %}|MockObject{% endif %} */
    private ${{ dependency.getName }}{% if dependency.isObject %}Mock{% endif %};

{% endfor %}
    /** @var {{ sut.getShortName }} */
    private $sut;

    /**
     * {@inheritdoc}
    */
    public function setUp()
    {
{% for dependency in sut.getDependencies %}
{% if dependency.isObject %}
{% if config.get('mockFramework') == 'phpunit' %}
        $this->{{ dependency.getName }}Mock = $this->createMock({{ dependency.getShortName }}::class);
{% else %}
        $this->{{ dependency.getName }}Mock = Mockery::mock({{ dependency.getShortName }}::class);
{% endif %}
{% else %}
        $this->{{ dependency.getName  }} = {{ dependency.getValue | scalar | raw }};
{% endif %}
{% if loop.last %}{{ '\n' }}{% endif %}
{% endfor %}
{% if sut.hasDependencies %}
        $this->sut = new {{ sut.getShortName }}(
    {% for dependency in sut.getDependencies %}
        $this->{{ dependency.getName }}{% if dependency.isObject %}Mock{% endif %}{% if not loop.last %}{{ ',\n' }}{% endif %}
    {% endfor %}

        );
{% else %}
        $this->sut = new {{ sut.getShortName }}();
{% endif %}
    }
{% for method in sut.getPublicMethods %}

    public function test{{ method[0:1]|upper ~ method[1:] }}()
    {
        $this->markTestIncomplete('This test has not been implemented yet.');
    }
{% endfor %}
}
